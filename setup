#!/usr/bin/env python
import os
import shutil

paths = []
for root, dirs, files in os.walk("resources"):
    for file in files:
        if file.endswith(".md"):
             paths.append(root[10:])

def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        print('Creating {}'.format(os.path.join(dst, item)))
        if not os.path.exists(dst):
          os.mkdir(dst)

        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)

for path in set(paths):
  directories = path.split('/')
  src = 'resources'
  dst = 'docs'

  for d in directories:
    if not os.path.exists(os.path.join(src, d, 'README.md')):
      src = os.path.join(src, d)
      dst = os.path.join(dst, d.replace('_', ' ').title())
      continue

    src = os.path.join(src, d)

    if not os.path.exists(dst):
      os.mkdir(dst)

    try:
      print('Scanning {}'.format(src))
      for f in filter(lambda e: os.path.isfile(os.path.join(src, e)) and e.endswith('.md'), os.listdir(src)):
        print('Creating {}'.format(os.path.join(dst, '{}_{}.md'.format(d, f.replace('.md', '')))))
        shutil.copy(os.path.join(src, f), os.path.join(dst, '{}_{}.md'.format(d, f.replace('.md', ''))))
    except OSError as e:
      pass

    if os.path.exists(os.path.join(src, 'docs')):
      print('Scanning {}'.format(os.path.join(src, 'docs')))
      try:
        copytree(os.path.join(src, 'docs'), os.path.join(dst, 'docs'))
      except OSError as e:
        pass